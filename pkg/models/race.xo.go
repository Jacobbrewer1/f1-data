// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jacobbrewer1/patcher"
	"github.com/jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

// Race represents a row from 'race'.
type Race struct {
	Id        int       `db:"id,autoinc,pk"`
	SeasonId  int       `db:"season_id"`
	GrandPrix string    `db:"grand_prix"`
	Date      time.Time `db:"date"`
}

// Insert inserts the Race to the database.
func (m *Race) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Race"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO race (" +
		"`season_id`, `grand_prix`, `date`" +
		") VALUES (" +
		"?, ?, ?" +
		")"

	DBLog(sqlstr, m.SeasonId, m.GrandPrix, m.Date)
	res, err := db.Exec(sqlstr, m.SeasonId, m.GrandPrix, m.Date)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyRaces(db DB, ms ...*Race) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_Race"))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, []any{*m})
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable("race")).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *Race) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the Race in the database.
func (m *Race) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_Race"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE race " +
		"SET `season_id` = ?, `grand_prix` = ?, `date` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.SeasonId, m.GrandPrix, m.Date, m.Id)
	res, err := db.Exec(sqlstr, m.SeasonId, m.GrandPrix, m.Date, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

func (m *Race) Patch(db DB, newT *Race) error {
	if newT == nil {
		return errors.New("new race is nil")
	}

	res, err := patcher.NewDiffSQLPatch(m, newT, patcher.WithTable("race"))
	if err != nil {
		return fmt.Errorf("new diff sql patch: %w", err)
	}

	sqlstr, args, err := res.GenerateSQL()
	if err != nil {
		switch {
		case errors.Is(err, patcher.ErrNoChanges):
			return nil
		default:
			return fmt.Errorf("failed to create patch: %w", err)
		}
	}

	DBLog(sqlstr, args...)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return fmt.Errorf("failed to execute patch: %w", err)
	}

	return nil
}

// InsertWithUpdate inserts the Race to the database, and tries to update
// on unique constraint violations.
func (m *Race) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_Race"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO race (" +
		"`season_id`, `grand_prix`, `date`" +
		") VALUES (" +
		"?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`season_id` = VALUES(`season_id`), `grand_prix` = VALUES(`grand_prix`), `date` = VALUES(`date`)"

	DBLog(sqlstr, m.SeasonId, m.GrandPrix, m.Date)
	res, err := db.Exec(sqlstr, m.SeasonId, m.GrandPrix, m.Date)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the Race to the database.
func (m *Race) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the Race to the database, but tries to update
// on unique constraint violations.
func (m *Race) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the Race from the database.
func (m *Race) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_Race"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM race WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// RaceById retrieves a row from 'race' as a Race.
//
// Generated from primary key.
func RaceById(db DB, id int) (*Race, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Race"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `season_id`, `grand_prix`, `date` " +
		"FROM race " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m Race
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// GetSeasonIdSeason Gets an instance of Season
//
// Generated from constraint race_season_id_fk
func (m *Race) GetSeasonIdSeason(db DB) (*Season, error) {
	return SeasonById(db, m.SeasonId)
}
