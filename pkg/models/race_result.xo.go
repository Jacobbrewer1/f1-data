// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"

	"github.com/Jacobbrewer1/patcher"
	"github.com/Jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

// RaceResult represents a row from 'race_result'.
type RaceResult struct {
	Id           int     `db:"id,autoinc,pk"`
	RaceId       int     `db:"race_id"`
	Position     string  `db:"position"`
	DriverNumber int     `db:"driver_number"`
	Driver       string  `db:"driver"`
	DriverTag    string  `db:"driver_tag"`
	Team         string  `db:"team"`
	Laps         int     `db:"laps"`
	TimeRetired  string  `db:"time_retired"`
	Points       float64 `db:"points"`
}

// Insert inserts the RaceResult to the database.
func (m *RaceResult) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_RaceResult"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO race_result (" +
		"`race_id`, `position`, `driver_number`, `driver`, `driver_tag`, `team`, `laps`, `time_retired`, `points`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.RaceId, m.Position, m.DriverNumber, m.Driver, m.DriverTag, m.Team, m.Laps, m.TimeRetired, m.Points)
	res, err := db.Exec(sqlstr, m.RaceId, m.Position, m.DriverNumber, m.Driver, m.DriverTag, m.Team, m.Laps, m.TimeRetired, m.Points)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyRaceResults(db DB, ms ...*RaceResult) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_RaceResult"))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, []any{*m})
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable("race_result")).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *RaceResult) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the RaceResult in the database.
func (m *RaceResult) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_RaceResult"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE race_result " +
		"SET `race_id` = ?, `position` = ?, `driver_number` = ?, `driver` = ?, `driver_tag` = ?, `team` = ?, `laps` = ?, `time_retired` = ?, `points` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.RaceId, m.Position, m.DriverNumber, m.Driver, m.DriverTag, m.Team, m.Laps, m.TimeRetired, m.Points, m.Id)
	res, err := db.Exec(sqlstr, m.RaceId, m.Position, m.DriverNumber, m.Driver, m.DriverTag, m.Team, m.Laps, m.TimeRetired, m.Points, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

func (m *RaceResult) Patch(db DB, newT *RaceResult) error {
	if newT == nil {
		return errors.New("new race_result is nil")
	}

	res, err := patcher.NewDiffSQLPatch(m, newT, patcher.WithTable("race_result"))
	if err != nil {
		return fmt.Errorf("new diff sql patch: %w", err)
	}

	sqlstr, args, err := res.GenerateSQL()
	if err != nil {
		switch {
		case errors.Is(err, patcher.ErrNoChanges):
			return nil
		default:
			return fmt.Errorf("failed to create patch: %w", err)
		}
	}

	DBLog(sqlstr, args...)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return fmt.Errorf("failed to execute patch: %w", err)
	}

	return nil
}

// InsertWithUpdate inserts the RaceResult to the database, and tries to update
// on unique constraint violations.
func (m *RaceResult) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_RaceResult"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO race_result (" +
		"`race_id`, `position`, `driver_number`, `driver`, `driver_tag`, `team`, `laps`, `time_retired`, `points`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`race_id` = VALUES(`race_id`), `position` = VALUES(`position`), `driver_number` = VALUES(`driver_number`), `driver` = VALUES(`driver`), `driver_tag` = VALUES(`driver_tag`), `team` = VALUES(`team`), `laps` = VALUES(`laps`), `time_retired` = VALUES(`time_retired`), `points` = VALUES(`points`)"

	DBLog(sqlstr, m.RaceId, m.Position, m.DriverNumber, m.Driver, m.DriverTag, m.Team, m.Laps, m.TimeRetired, m.Points)
	res, err := db.Exec(sqlstr, m.RaceId, m.Position, m.DriverNumber, m.Driver, m.DriverTag, m.Team, m.Laps, m.TimeRetired, m.Points)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the RaceResult to the database.
func (m *RaceResult) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the RaceResult to the database, but tries to update
// on unique constraint violations.
func (m *RaceResult) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the RaceResult from the database.
func (m *RaceResult) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_RaceResult"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM race_result WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// RaceResultById retrieves a row from 'race_result' as a RaceResult.
//
// Generated from primary key.
func RaceResultById(db DB, id int) (*RaceResult, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_RaceResult"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `race_id`, `position`, `driver_number`, `driver`, `driver_tag`, `team`, `laps`, `time_retired`, `points` " +
		"FROM race_result " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m RaceResult
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// GetRaceIdRace Gets an instance of Race
//
// Generated from constraint race_result_race_id_fk
func (m *RaceResult) GetRaceIdRace(db DB) (*Race, error) {
	return RaceById(db, m.RaceId)
}
