// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jacobbrewer1/patcher"
	"github.com/jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

// ConstructorChampionship represents a row from 'constructor_championship'.
type ConstructorChampionship struct {
	Id        int       `db:"id,pk,autoinc"`
	SeasonId  int       `db:"season_id"`
	Position  int       `db:"position"`
	Name      string    `db:"name"`
	Points    float64   `db:"points"`
	UpdatedAt time.Time `db:"updated_at"`
}

// Insert inserts the ConstructorChampionship to the database.
func (m *ConstructorChampionship) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_ConstructorChampionship"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO constructor_championship (" +
		"`season_id`, `position`, `name`, `points`, `updated_at`" +
		") VALUES (" +
		"?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.SeasonId, m.Position, m.Name, m.Points, m.UpdatedAt)
	res, err := db.Exec(sqlstr, m.SeasonId, m.Position, m.Name, m.Points, m.UpdatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyConstructorChampionships(db DB, ms ...*ConstructorChampionship) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_ConstructorChampionship"))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, []any{*m})
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable("constructor_championship")).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *ConstructorChampionship) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the ConstructorChampionship in the database.
func (m *ConstructorChampionship) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_ConstructorChampionship"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE constructor_championship " +
		"SET `season_id` = ?, `position` = ?, `name` = ?, `points` = ?, `updated_at` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.SeasonId, m.Position, m.Name, m.Points, m.UpdatedAt, m.Id)
	res, err := db.Exec(sqlstr, m.SeasonId, m.Position, m.Name, m.Points, m.UpdatedAt, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

func (m *ConstructorChampionship) Patch(db DB, newT *ConstructorChampionship) error {
	if newT == nil {
		return errors.New("new constructor_championship is nil")
	}

	res, err := patcher.NewDiffSQLPatch(m, newT, patcher.WithTable("constructor_championship"))
	if err != nil {
		return fmt.Errorf("new diff sql patch: %w", err)
	}

	sqlstr, args, err := res.GenerateSQL()
	if err != nil {
		switch {
		case errors.Is(err, patcher.ErrNoChanges):
			return nil
		default:
			return fmt.Errorf("failed to create patch: %w", err)
		}
	}

	DBLog(sqlstr, args...)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return fmt.Errorf("failed to execute patch: %w", err)
	}

	return nil
}

// InsertWithUpdate inserts the ConstructorChampionship to the database, and tries to update
// on unique constraint violations.
func (m *ConstructorChampionship) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_ConstructorChampionship"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO constructor_championship (" +
		"`season_id`, `position`, `name`, `points`, `updated_at`" +
		") VALUES (" +
		"?, ?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`season_id` = VALUES(`season_id`), `position` = VALUES(`position`), `name` = VALUES(`name`), `points` = VALUES(`points`), `updated_at` = VALUES(`updated_at`)"

	DBLog(sqlstr, m.SeasonId, m.Position, m.Name, m.Points, m.UpdatedAt)
	res, err := db.Exec(sqlstr, m.SeasonId, m.Position, m.Name, m.Points, m.UpdatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the ConstructorChampionship to the database.
func (m *ConstructorChampionship) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the ConstructorChampionship to the database, but tries to update
// on unique constraint violations.
func (m *ConstructorChampionship) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the ConstructorChampionship from the database.
func (m *ConstructorChampionship) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_ConstructorChampionship"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM constructor_championship WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// ConstructorChampionshipById retrieves a row from 'constructor_championship' as a ConstructorChampionship.
//
// Generated from primary key.
func ConstructorChampionshipById(db DB, id int) (*ConstructorChampionship, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_ConstructorChampionship"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `season_id`, `position`, `name`, `points`, `updated_at` " +
		"FROM constructor_championship " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m ConstructorChampionship
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// GetSeasonIdSeason Gets an instance of Season
//
// Generated from constraint team_championship_season_id_fk
func (m *ConstructorChampionship) GetSeasonIdSeason(db DB) (*Season, error) {
	return SeasonById(db, m.SeasonId)
}
