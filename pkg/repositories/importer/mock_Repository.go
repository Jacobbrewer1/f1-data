// Code generated by mockery v2.45.0. DO NOT EDIT.

package importer

import (
	models "github.com/Jacobbrewer1/f1-data/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetRaceBySeasonIdAndGrandPrix provides a mock function with given fields: seasonId, grandPrix
func (_m *MockRepository) GetRaceBySeasonIdAndGrandPrix(seasonId int, grandPrix string) (*models.Race, error) {
	ret := _m.Called(seasonId, grandPrix)

	if len(ret) == 0 {
		panic("no return value specified for GetRaceBySeasonIdAndGrandPrix")
	}

	var r0 *models.Race
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*models.Race, error)); ok {
		return rf(seasonId, grandPrix)
	}
	if rf, ok := ret.Get(0).(func(int, string) *models.Race); ok {
		r0 = rf(seasonId, grandPrix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Race)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(seasonId, grandPrix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRaceResultByRaceIdAndDriverNumber provides a mock function with given fields: raceId, driverNumber
func (_m *MockRepository) GetRaceResultByRaceIdAndDriverNumber(raceId int, driverNumber int) (*models.RaceResult, error) {
	ret := _m.Called(raceId, driverNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetRaceResultByRaceIdAndDriverNumber")
	}

	var r0 *models.RaceResult
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*models.RaceResult, error)); ok {
		return rf(raceId, driverNumber)
	}
	if rf, ok := ret.Get(0).(func(int, int) *models.RaceResult); ok {
		r0 = rf(raceId, driverNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RaceResult)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(raceId, driverNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSeasonByYear provides a mock function with given fields: year
func (_m *MockRepository) GetSeasonByYear(year int) (*models.Season, error) {
	ret := _m.Called(year)

	if len(ret) == 0 {
		panic("no return value specified for GetSeasonByYear")
	}

	var r0 *models.Season
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Season, error)); ok {
		return rf(year)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Season); ok {
		r0 = rf(year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Season)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRace provides a mock function with given fields: race
func (_m *MockRepository) SaveRace(race *models.Race) error {
	ret := _m.Called(race)

	if len(ret) == 0 {
		panic("no return value specified for SaveRace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Race) error); ok {
		r0 = rf(race)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRaceResult provides a mock function with given fields: raceResult
func (_m *MockRepository) SaveRaceResult(raceResult *models.RaceResult) error {
	ret := _m.Called(raceResult)

	if len(ret) == 0 {
		panic("no return value specified for SaveRaceResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.RaceResult) error); ok {
		r0 = rf(raceResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSeason provides a mock function with given fields: season
func (_m *MockRepository) SaveSeason(season *models.Season) error {
	ret := _m.Called(season)

	if len(ret) == 0 {
		panic("no return value specified for SaveSeason")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Season) error); ok {
		r0 = rf(season)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
